type Query {
  users(nameQuery: String): [User!]!
  repos(nameQuery: String): [Repo!]!
  comments(idOfRepo: ID!): [Comment!]!
  userById(idQuery: ID!): User!
  repoById(idQuery: ID!): Repo!
}

type Mutation {
  signUp(userData: signup_data!): signup_auth_data!
  deleteUser(userId: ID!): User!
  updateUser(userId: ID!, updateData: update_user_data!): User!
  createRepo(repoData: create_repo_data!): Repo!
  deleteRepo(repoId: ID!): Repo!
  updateRepo(repoId: ID!, updateData: update_repo_data): Repo!
  createComment(data: create_comment_data!): Comment!
  deleteComment(commentId: ID!): Comment!
  updateComment(commentId: ID!, data: update_comment_data): Comment!
}

type User {
  id: ID!
  name: String!
  email: String!
  repos(visibility: visibilityQuery!): [Repo]!
  comments(idOfRepo: ID!): [Comment]!
}

input input_login_data {
  email: String!
  password: String!
}

type AuthData {
  id: ID!
  token: String!
  expirationTime: Int!
}

type Repo {
  id: ID!
  title: String!
  visibility: String!
  developer: User!
  comments: [Comment]!
}

type Comment {
  id: ID!
  text: String!
  repo: Repo!
  developer: User!
}

input signup_data {
  name: String!
  email: String!
  password: String!
}
input create_repo_data {
  title: String!
  visibility: String!
  developer: String!
}

input update_user_data {
  name: String
  email: String
}

input update_repo_data {
  title: String
  visibility: String
}

input create_comment_data {
  text: String!
  developer: ID!
  idOfRepo: ID!
}
input update_comment_data {
  text: String!
}

type signup_auth_data {
  user: User!
  token: String!
  expirationTime: Int!
}

enum visibilityQuery {
  PUBLIC
  PRIVATE
  ALL
}
